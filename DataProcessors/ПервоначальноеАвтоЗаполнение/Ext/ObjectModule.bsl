


Процедура ЗаполнитьИсходныеДанные() Экспорт
	
	//ДобавитьДанныеИзМакета();
	
	админ = Справочники.Пользователи.СоздатьЭлемент();
	админ.Наименование = "Администратор";
	
	
	админиб = ПользователиИнформационнойБазы.СоздатьПользователя();
	
	админиб.АутентификацияСтандартная = Истина;
	админиб.Имя = "admin";
	админиб.ПолноеИмя = "Администратор";
	админиб.Пароль = "12345";
	админиб.Роли.Добавить(Метаданные.Роли.АдминистраторСистемы);
	админиб.Роли.Добавить(Метаданные.Роли.ИАС);
	админиб.Роли.Добавить(Метаданные.Роли.ПДС);
	админиб.Роли.Добавить(Метаданные.Роли.КоммерческийОтдел);
	админиб.Роли.Добавить(Метаданные.Роли.ЛетнаяСлужба);
	админиб.Роли.Добавить(Метаданные.Роли.ПолныеПрава);
	
	админиб.Записать();
	админ.ИдентификаторПользователяИБ = админиб.УникальныйИдентификатор;
	админ.ОбменДанными.Загрузка = Истина;
	админ.Записать();
	
	админц = Справочники.Пользователи.СоздатьЭлемент();
	админц.Наименование = "Администратор компании";
	
	админциб = ПользователиИнформационнойБазы.СоздатьПользователя();
	
	админциб.АутентификацияСтандартная = Истина;
	админциб.Имя = "adminc";
	админциб.ПолноеИмя = "Администратор компании";
	админциб.Пароль = "12345";
	админциб.Роли.Добавить(Метаданные.Роли.АдминистраторАК);
	админциб.Роли.Добавить(Метаданные.Роли.БазовыеПрава);
	админциб.Роли.Добавить(Метаданные.Роли.ПолныеПрава);
	
	админциб.Записать();
	админц.ИдентификаторПользователяИБ = админциб.УникальныйИдентификатор;
	админц.ОбменДанными.Загрузка = Истина;
	админц.Записать();
	
КонецПроцедуры

//МассивУсловий - Массив структур условий
//Структура условия:
//- ТипЗначения - Тип значения объекта (например Тип("СправочникОбъект.Аэропорты"))
//- ПроверяемыеРеквизиты - Структура: (необязательный)
//	- Ключ - Имя проверяемого реквизита
//	- Значение - Структура
//		Структура проверки реквизита
//		- ВидСравнения - строка операwии сравнения: может принимать значения ">","<","=",">=","<=","<>","ВСписке"
//		- ЗначениеСравнения - Значение, с которым сравнивается реквизит. Для вида сравнения "ВСписке" передаётся массив значений
Процедура ДобавитьДанныеИзМакета(ИмяМакета = Неопределено, МассивУсловий = Неопределено) Экспорт
	
	Если ИмяМакета = Неопределено Тогда
		МакетДвоичный = ПолучитьМакет("ИсходныеДанные");
		СтрокаХМЛ = ПолучитьСтрокуИзДвоичныхДанных(МакетДвоичный);
	Иначе
		мак = ПолучитьМакет(ИмяМакета);
		СтрокаХМЛ = мак.ПолучитьТекст();
	КонецЕсли;
	
	ЧтениеXML  = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаХМЛ);   
	ЧтениеXML.Прочитать();
	ЧтениеXML.Прочитать();
	Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
		ТекОбъект = ПрочитатьXML(ЧтениеXML);
		Если НужноЗагружать(ТекОбъект, МассивУсловий) Тогда
			Если Метаданные.Справочники.Содержит(ТекОбъект.Метаданные()) Тогда
				Если ТекОбъект.ИмяПредопределенныхДанных <> "" Тогда
					ИмяСправочника = ТекОбъект.Метаданные().Имя;
					СуществующийЭлемент  = Справочники[ИмяСправочника][ТекОбъект.ИмяПредопределенныхДанных].ПолучитьОбъект();
					СуществующийЭлемент.ИмяПредопределенныхДанных = "";
					СуществующийЭлемент.Записать();
					СуществующийЭлемент.Удалить();
				КонецЕсли;
			КонецЕсли;
			ТекОбъект.ОбменДанными.Загрузка = Истина;
			ТекОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
КонецПроцедуры

Функция НужноЗагружать(ТекОбъект, МассивУсловий)
	
	Если МассивУсловий = Неопределено Тогда
		Возврат Истина;
	Иначе
		Результат = Ложь;
		Для Каждого Условие Из МассивУсловий Цикл
			Если Условие.ТипЗначения = ТипЗнч(ТекОбъект) Тогда
				Результат = Истина;
				Если Условие.Свойство("ПроверяемыеРеквизиты") Тогда
					Для Каждого рек Из Условие.ПроверяемыеРеквизиты Цикл
						Если рек.Значение.ВидСравнения = "ВСписке" Тогда
							ТекРезультат = рек.Значение.ЗначениеСравнения.Найти(ТекОбъект[рек.Ключ]) <> Неопределено;
						Иначе
							ТекРезультат = Вычислить("ТекОбъект[рек.Ключ]" + рек.Значение.ВидСравнения + "рек.Значение.ЗначениеСравнения");
						КонецЕсли;
						Результат = Результат И ТекРезультат;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

	
	
	
	

	
	
	
	
	
	
	
	
	


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда 
		Объект.ТекстЗапроса = "{" + Символ(34) + "query" + Символ(34) + ": " + Символ(34) + "query {\n             }\n  " + Символ(34) + "}";
		Объект.ТипМодели = Перечисления.ТипМодели.ПустаяСсылка();
		ЭтаФорма.Элементы.ТипМодели.Доступность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СформироватьЗапросНаСервере()

	Объект.ТекстЗапроса = "";
	Разделитель = ",";
	ПреносСтрокиКонсоль = "\n";
	СкрытьСимволКавычки = "\" + Символ(34);

	 Если СтрЧислоСтрок(Объект.ИскходныйТекстДляФормированияЗапроса) = 0 Тогда 
		 Возврат;
	 Иначе
			//	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипМодели.Query") Тогда 
			//		Объект.ИскходныйТекстДляФормированияЗапроса  = "query {";
			//	ИначеЕсли ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипМодели.Mutation") Тогда
			//		Объект.ИскходныйТекстДляФормированияЗапроса  = "mutation {"; 
			//	ИначеЕсли ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипМодели.Subscription") Тогда 
			//		Объект.ИскходныйТекстДляФормированияЗапроса  = "subscription {";	
			//	КонецЕсли;
		 Объект.ТекстЗапроса = "{" + Символ(34) + "query" + Символ(34) + ": " + Символ(34) + "query {";
	 КонецЕсли;

    Для Индекс = 1 По СтрЧислоСтрок(Объект.ИскходныйТекстДляФормированияЗапроса) Цикл
        ТекущCтрока = СтрПолучитьСтроку(Объект.ИскходныйТекстДляФормированияЗапроса, Индекс);
			Если ТекущCтрока = "{" Тогда // "{"
				Объект.ТекстЗапроса = Объект.ТекстЗапроса + " {" + ПреносСтрокиКонсоль;
			ИначеЕсли ТекущCтрока = "}" Тогда // "}"
				Объект.ТекстЗапроса = Объект.ТекстЗапроса + " }" + ПреносСтрокиКонсоль;
			ИначеЕсли Прав(ТекущCтрока, 1) = "{" Тогда  // "        {"
				Объект.ТекстЗапроса = Объект.ТекстЗапроса + " " + СокрЛП(ТекущCтрока) + ПреносСтрокиКонсоль;
			ИначеЕсли СтрНайти(ТекущCтрока, "{") = 0 И СтрНайти(ТекущCтрока, "}") > 0 Тогда  //  "                }"
				Объект.ТекстЗапроса = Объект.ТекстЗапроса + " " + СокрЛП(ТекущCтрока) + ПреносСтрокиКонсоль;
			ИначеЕсли СтрНайти(ТекущCтрока, Разделитель) > 0 И СтрЧислоВхождений(ТекущCтрока, Символ(34)) = 0 И СтрНайти(ТекущCтрока, "{") = 0 И СтрНайти(ТекущCтрока, "}") = 0 Тогда // "       flightNo, "
				Объект.ТекстЗапроса = Объект.ТекстЗапроса + " " + СокрЛП(ТекущCтрока) + ПреносСтрокиКонсоль;
			ИначеЕсли СтрНайти(ТекущCтрока, Разделитель) > 0 И СтрЧислоВхождений(ТекущCтрока, Символ(34)) > 0 И СтрНайти(ТекущCтрока, "{") = 0 И СтрНайти(ТекущCтрока, "}") = 0  Тогда // "       			    startTime : "ДатаНачала", "
				Объект.ТекстЗапроса = Объект.ТекстЗапроса + " " + СтрЗаменить(СокрЛП(ТекущCтрока), Символ(34), СкрытьСимволКавычки) + ПреносСтрокиКонсоль;
			ИначеЕсли СтрЧислоВхождений(ТекущCтрока, Символ(34)) > 0 И СтрНайти(ТекущCтрока, "{") = 0 И СтрНайти(ТекущCтрока, "}") = 0 Тогда  //  "   emptyLegList(startTime: "firstDate")    "
				Объект.ТекстЗапроса = Объект.ТекстЗапроса + " " + СтрЗаменить(СокрЛП(ТекущCтрока), Символ(34), СкрытьСимволКавычки) + ПреносСтрокиКонсоль;
			ИначеЕсли СтрНайти(ТекущCтрока, "{") = 0 И СтрНайти(ТекущCтрока, "}") = 0 Тогда // "          aircraftAvailability   "
				Объект.ТекстЗапроса = Объект.ТекстЗапроса + " " + СокрЛП(ТекущCтрока);
			КонецЕсли;
    КонецЦикла;
	
	Объект.ТекстЗапроса = Объект.ТекстЗапроса + " }" + ПреносСтрокиКонсоль + " " + Символ(34) + "}";

КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗапрос(Команда)
	СформироватьЗапросНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТипМоделиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ЭтаФорма.Элементы.ТипМодели.Доступность = Ложь;
		
	//	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипМодели.Query") Тогда 
	//		Объект.ИскходныйТекстДляФормированияЗапроса  = "query {";
	//	ИначеЕсли ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипМодели.Mutation") Тогда
	//		Объект.ИскходныйТекстДляФормированияЗапроса  = "mutation {"; 
	//	ИначеЕсли ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипМодели.Subscription") Тогда 
	//		Объект.ИскходныйТекстДляФормированияЗапроса  = "subscription {";	
	//	КонецЕсли;

	//Для СчСтрок = 1 По 16 Цикл
	//	Объект.ИскходныйТекстДляФормированияЗапроса = Объект.ИскходныйТекстДляФормированияЗапроса + Символы.ПС;
	//КонецЦикла;

	//Объект.ИскходныйТекстДляФормированияЗапроса = Объект.ИскходныйТекстДляФормированияЗапроса + "   }";

КонецПроцедуры

&НаКлиенте
Процедура ИскходныйТекстДляФормированияЗапросаПриИзменении(Элемент)

	Если Объект.ТипМодели = ПредопределенноеЗначение("Перечисление.ТипМодели.ПустаяСсылка") Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
		ПоказатьПредупреждение(Оповещение, "Перед вводом текста запроса, необходимо выбрать тип модели (CHEMA)! ", 0, "Внимание!");
		
		Объект.ИскходныйТекстДляФормированияЗапроса = "";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияПредупреждение(Параметры) Экспорт
КонецПроцедуры

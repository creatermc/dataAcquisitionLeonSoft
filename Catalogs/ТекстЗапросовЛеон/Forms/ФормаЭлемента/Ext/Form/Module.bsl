
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда 
		Объект.ТекстЗапроса = "{" + Символ(34) + "query" + Символ(34) + ": " + Символ(34) + "query {\n             }\n  " + Символ(34) + "}";
		Объект.ТипМодели = Перечисления.ТипМодели.ПустаяСсылка();
		ЭтаФорма.Элементы.ТипМодели.Доступность = Истина;
	КонецЕсли;

КонецПроцедуры


&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
 	ДокументЗапроса = ТекущийОбъект.ДокументЗапросаХранЗнач.Получить();
КонецПроцедуры

&НаСервере
Процедура СформироватьЗапросНаСервере()

	Объект.ТекстЗапроса = "";
	Разделитель = ",";
	ПреносСтрокиКонсоль = "\n";
	СкрытьСимволКавычки = "\" + Символ(34);

	 Если СтрЧислоСтрок(ДокументЗапроса.ПолучитьТекст()) = 0 Тогда 
		 Возврат;
	 Иначе

		 Если СтрЧислоВхождений(ДокументЗапроса.ПолучитьТекст(), "{") <> СтрЧислоВхождений(ДокументЗапроса.ПолучитьТекст(), "}") Тогда
			 	Сообщить("Внимание! Количество открытых фигурных скобок неравно закрытых, проверьте текст запроса!");
			 Возврат; 
		 КонецЕсли;

		 Если СтрЧислоВхождений(ДокументЗапроса.ПолучитьТекст(), "(") <> СтрЧислоВхождений(ДокументЗапроса.ПолучитьТекст(), ")") Тогда
			 	Сообщить("Внимание! Количество открытых круглых скобок неравно закрытых, проверьте текст запроса!");
			 Возврат; 
		 КонецЕсли;

		 Если Объект.ТипМодели = Перечисления.ТипМодели.Query Тогда 
			 Объект.ТекстЗапроса = "{" + Символ(34) + "query" + Символ(34) + ": " + Символ(34) + "query {";
		 ИначеЕсли Объект.ТипМодели = Перечисления.ТипМодели.Mutation Тогда 
			 Объект.ТекстЗапроса = "{" + Символ(34) + "mutation" + Символ(34) + ": " + Символ(34) + "query {";
		 ИначеЕсли Объект.ТипМодели = Перечисления.ТипМодели.Subscription Тогда 
			 Объект.ТекстЗапроса = "{" + Символ(34) + "subscription" + Символ(34) + ": " + Символ(34) + "query {";
		 КонецЕсли;
	 КонецЕсли;

	    Для Индекс = 1 По СтрЧислоСтрок(ДокументЗапроса.ПолучитьТекст()) Цикл
	        ТекущCтрока = СтрПолучитьСтроку(ДокументЗапроса.ПолучитьТекст(), Индекс);
				Если ТекущCтрока = "{" Тогда // "{"
					Объект.ТекстЗапроса = Объект.ТекстЗапроса + " {" + ПреносСтрокиКонсоль;
				ИначеЕсли ТекущCтрока = "}" Тогда // "}"
					Объект.ТекстЗапроса = Объект.ТекстЗапроса + " }" + ПреносСтрокиКонсоль;
				ИначеЕсли Прав(ТекущCтрока, 1) = "{" Тогда  // "        {"
					Объект.ТекстЗапроса = Объект.ТекстЗапроса + " " + СокрЛП(СтрЗаменить(СокрЛП(ТекущCтрока), "{", "")) + " {" + ПреносСтрокиКонсоль; // "flights               {"
				ИначеЕсли СтрНайти(ТекущCтрока, "{") = 0 И СтрНайти(СокрЛП(ТекущCтрока), "}") = 1 Тогда  //  "                }"
					Объект.ТекстЗапроса = Объект.ТекстЗапроса + " " + СокрЛП(ТекущCтрока) + ПреносСтрокиКонсоль;
				ИначеЕсли СтрНайти(СокрЛП(ТекущCтрока), "{") = 1 И СтрНайти(ТекущCтрока, "}") = 0 Тогда  //  " {              "
					Объект.ТекстЗапроса = Объект.ТекстЗапроса + " " + СокрЛП(ТекущCтрока) + ПреносСтрокиКонсоль;
				ИначеЕсли СтрНайти(ТекущCтрока, "{") > 0 И СтрНайти(СокрЛП(ТекущCтрока), "}") = 0 Тогда  	//  "  aircraftAvailability{     "
					Объект.ТекстЗапроса = Объект.ТекстЗапроса + " " + СокрЛП(СтрЗаменить(СокрЛП(ТекущCтрока), "{", "")) + ПреносСтрокиКонсоль + " {" + ПреносСтрокиКонсоль;
				ИначеЕсли СтрНайти(ТекущCтрока, "{") = 0 И СтрНайти(СокрЛП(ТекущCтрока), "}") > 0 Тогда  	//  "  name	 			}  "
					Объект.ТекстЗапроса = Объект.ТекстЗапроса + " " + СокрЛП(СтрЗаменить(СокрЛП(ТекущCтрока), "}", "")) + ПреносСтрокиКонсоль + " }" + ПреносСтрокиКонсоль;
				ИначеЕсли СтрНайти(ТекущCтрока, Разделитель) > 0 И СтрЧислоВхождений(ТекущCтрока, Символ(34)) = 0 И СтрНайти(ТекущCтрока, "{") = 0 И СтрНайти(ТекущCтрока, "}") = 0 Тогда // "       flightNo, "
					Объект.ТекстЗапроса = Объект.ТекстЗапроса + " " + СокрЛП(ТекущCтрока) + ПреносСтрокиКонсоль;
				ИначеЕсли СтрНайти(ТекущCтрока, Разделитель) > 0 И СтрЧислоВхождений(ТекущCтрока, Символ(34)) > 0 И СтрНайти(ТекущCтрока, "{") = 0 И СтрНайти(ТекущCтрока, "}") = 0  Тогда // "       			    startTime : "ДатаНачала", "
					Объект.ТекстЗапроса = Объект.ТекстЗапроса + " " + СтрЗаменить(СокрЛП(ТекущCтрока), Символ(34), СкрытьСимволКавычки) + ПреносСтрокиКонсоль;
				ИначеЕсли СтрЧислоВхождений(ТекущCтрока, Символ(34)) > 0 И СтрНайти(ТекущCтрока, "{") = 0 И СтрНайти(ТекущCтрока, "}") = 0 Тогда  //  "   emptyLegList(startTime: "firstDate")    "
					Объект.ТекстЗапроса = Объект.ТекстЗапроса + " " + СтрЗаменить(СокрЛП(ТекущCтрока), Символ(34), СкрытьСимволКавычки) + ПреносСтрокиКонсоль;
				ИначеЕсли СтрНайти(ТекущCтрока, "{") = 0 И СтрНайти(ТекущCтрока, "}") = 0 Тогда // "          aircraftAvailability   "
					Объект.ТекстЗапроса = Объект.ТекстЗапроса + " " + СокрЛП(ТекущCтрока);
				КонецЕсли;
	    КонецЦикла;

	Объект.ТекстЗапроса = Объект.ТекстЗапроса + " }" + ПреносСтрокиКонсоль + " " + Символ(34) + "}";

КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗапрос(Команда)
	СформироватьЗапросНаСервере();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТипМоделиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ЭтаФорма.Элементы.ТипМодели.Доступность = Ложь;
		
	//	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипМодели.Query") Тогда 
	//		Объект.ИскходныйТекстДляФормированияЗапроса  = "query {";
	//	ИначеЕсли ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипМодели.Mutation") Тогда
	//		Объект.ИскходныйТекстДляФормированияЗапроса  = "mutation {"; 
	//	ИначеЕсли ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипМодели.Subscription") Тогда 
	//		Объект.ИскходныйТекстДляФормированияЗапроса  = "subscription {";	
	//	КонецЕсли;

	//Для СчСтрок = 1 По 16 Цикл
	//	Объект.ИскходныйТекстДляФормированияЗапроса = Объект.ИскходныйТекстДляФормированияЗапроса + Символы.ПС;
	//КонецЦикла;

	//Объект.ИскходныйТекстДляФормированияЗапроса = Объект.ИскходныйТекстДляФормированияЗапроса + "   }";

КонецПроцедуры

&НаКлиенте
Процедура ИскходныйТекстДляФормированияЗапросаПриИзменении(Элемент)

	Если Объект.ТипМодели = ПредопределенноеЗначение("Перечисление.ТипМодели.ПустаяСсылка") Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
		ПоказатьПредупреждение(Оповещение, "Перед вводом текста запроса, необходимо выбрать тип модели (CHEMA)! ", 0, "Внимание!");
		
		ДокументЗапроса.Вставить(, "");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияПредупреждение(Параметры) Экспорт
КонецПроцедуры

&НаСервере
Функция ТестЗапросаНаСервере()

	Если Объект.ТекстЗапроса = "" Или Объект.ВнешнийСервис = Справочники.ВнешниеСервисы.ПустаяСсылка() Тогда 
		Возврат "Не заполнены основные поля!";
	Иначе
		Возврат LeonSoftwareCommonModules.ПолучитьОтветНаЗапросЛеонСофт(Объект.ТекстЗапроса, Объект.ВнешнийСервис, Истина);
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ТестЗапроса(Команда)

	предпроверка = "";
	РезультатЗапроса = ТестЗапросаНаСервере();

	Если ТипЗнч(РезультатЗапроса) = Тип("Соответствие") Тогда 		
		Если РезультатЗапроса.Получить("errors") = Неопределено Тогда
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
			ПоказатьПредупреждение(Оповещение, РезультатЗапроса.Получить("nformations"), 0, "Внимание!");
		Иначе
			предпроверка = РезультатЗапроса.Получить("errors");
			ВызватьИсключение РезультатЗапроса.Получить("errors");
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ДобавитьВТекстЗапросаНаСервере(ДанныеСтроки)
	Возврат	ПроверитьПодчиненностьЭлемента(ДанныеСтроки);
КонецФункции

&НаКлиенте
Процедура ДобавитьВТекстЗапроса(Команда)

	Если ЭтаФорма.Элементы.ЭлементыЗапроса.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	//	получить текущую строку в форме текствого поля "ДокументЗапроса.ПолучитьТекст()"
	//	ыв = ЭтаФорма.Элементы.ИскходныйТекстДляФормированияЗапроса.ПолучитьГраницыВыделения(1,1,100,1); //<НачалоСтроки>, <НачалоКолонки>, <КонецСтроки>, <КонецКолонки>)
	//	Сообщить(Элементы.ИскходныйТекстДляФормированияЗапроса.ВыделенныйТекст = "");

	ДокументЗапроса.Вставить(, "");

	ВыдСтроки = Новый Массив;
		Для Каждого ТекВыд Из Элементы.ЭлементыЗапроса.ВыделенныеСтроки Цикл
			ВыдСтроки.Добавить(ТекВыд);
		КонецЦикла;
	ЗаполнитьТекстВИскходныйТекстДляФормированияЗапроса(ВыдСтроки);

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТекстВИскходныйТекстДляФормированияЗапроса(ВыдСтроки)

	Для Каждого ТекВыд Из ВыдСтроки Цикл
		Элементы.ЭлементыЗапроса.ТекущаяСтрока = ТекВыд;
		ДанныеСтроки = Элементы.ЭлементыЗапроса.ТекущиеДанные;
		
		Если ДобавитьВТекстЗапросаНаСервере(ДанныеСтроки) Тогда 
			ДокументЗапроса = ДокументЗапроса + 
			ЭтаФорма.Элементы.ЭлементыЗапроса.ТекущиеДанные.Наименование + Символы.ПС + Символы.Таб + "{" + Символы.ПС + Символы.ПС +  Символы.Таб + Символы.ПС;
		Иначе 
			ДокументЗапроса = ДокументЗапроса + ЭтаФорма.Элементы.ЭлементыЗапроса.ТекущиеДанные.Наименование + "," + Символы.ПС;

				//Если ПроверитьНаПредыдущийЭлемент() Тогда 
				//	ДокументЗапроса = ДокументЗапроса + "}";
				//КонецЕсли; 
		КонецЕсли;	
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ПроверитьНаПредыдущийЭлемент()

	Для Индекс = 0 По СтрЧислоСтрок(ДокументЗапроса.ПолучитьТекст()) Цикл
	    ТекущCтрока = СтрПолучитьСтроку(ДокументЗапроса.ПолучитьТекст(), СтрЧислоСтрок(ДокументЗапроса.ПолучитьТекст()) - Индекс);
			//Если ТекущCтрока = "{" Тогда // "{"
			//	Объект.ТекстЗапроса = Объект.ТекстЗапроса + " {" + ПреносСтрокиКонсоль;
			//ИначеЕсли ТекущCтрока = "}" Тогда // "}"
			//	Объект.ТекстЗапроса = Объект.ТекстЗапроса + " }" + ПреносСтрокиКонсоль;
			//ИначеЕсли Прав(ТекущCтрока, 1) = "{" Тогда  // "        {"
			//	Объект.ТекстЗапроса = Объект.ТекстЗапроса + " " + СокрЛП(СтрЗаменить(СокрЛП(ТекущCтрока), "{", "")) + " {" + ПреносСтрокиКонсоль; // "flights               {"
			//ИначеЕсли СтрНайти(ТекущCтрока, "{") = 0 И СтрНайти(СокрЛП(ТекущCтрока), "}") = 1 Тогда  //  "                }"
			//	Объект.ТекстЗапроса = Объект.ТекстЗапроса + " " + СокрЛП(ТекущCтрока) + ПреносСтрокиКонсоль;
			//ИначеЕсли СтрНайти(СокрЛП(ТекущCтрока), "{") = 1 И СтрНайти(ТекущCтрока, "}") = 0 Тогда  //  " {              "
			//	Объект.ТекстЗапроса = Объект.ТекстЗапроса + " " + СокрЛП(ТекущCтрока) + ПреносСтрокиКонсоль;
			//ИначеЕсли СтрНайти(ТекущCтрока, "{") > 0 И СтрНайти(СокрЛП(ТекущCтрока), "}") = 0 Тогда  	//  "  aircraftAvailability{     "
			//	Объект.ТекстЗапроса = Объект.ТекстЗапроса + " " + СокрЛП(СтрЗаменить(СокрЛП(ТекущCтрока), "{", "")) + ПреносСтрокиКонсоль + " {" + ПреносСтрокиКонсоль;
			//ИначеЕсли СтрНайти(ТекущCтрока, "{") = 0 И СтрНайти(СокрЛП(ТекущCтрока), "}") > 0 Тогда  	//  "  name	 			}  "
			//	Объект.ТекстЗапроса = Объект.ТекстЗапроса + " " + СокрЛП(СтрЗаменить(СокрЛП(ТекущCтрока), "}", "")) + ПреносСтрокиКонсоль + " }" + ПреносСтрокиКонсоль;
			//ИначеЕсли СтрНайти(ТекущCтрока, Разделитель) > 0 И СтрЧислоВхождений(ТекущCтрока, Символ(34)) = 0 И СтрНайти(ТекущCтрока, "{") = 0 И СтрНайти(ТекущCтрока, "}") = 0 Тогда // "       flightNo, "
			//	Объект.ТекстЗапроса = Объект.ТекстЗапроса + " " + СокрЛП(ТекущCтрока) + ПреносСтрокиКонсоль;
			//ИначеЕсли СтрНайти(ТекущCтрока, Разделитель) > 0 И СтрЧислоВхождений(ТекущCтрока, Символ(34)) > 0 И СтрНайти(ТекущCтрока, "{") = 0 И СтрНайти(ТекущCтрока, "}") = 0  Тогда // "       			    startTime : "ДатаНачала", "
			//	Объект.ТекстЗапроса = Объект.ТекстЗапроса + " " + СтрЗаменить(СокрЛП(ТекущCтрока), Символ(34), СкрытьСимволКавычки) + ПреносСтрокиКонсоль;
			//ИначеЕсли СтрЧислоВхождений(ТекущCтрока, Символ(34)) > 0 И СтрНайти(ТекущCтрока, "{") = 0 И СтрНайти(ТекущCтрока, "}") = 0 Тогда  //  "   emptyLegList(startTime: "firstDate")    "
			//	Объект.ТекстЗапроса = Объект.ТекстЗапроса + " " + СтрЗаменить(СокрЛП(ТекущCтрока), Символ(34), СкрытьСимволКавычки) + ПреносСтрокиКонсоль;
			//ИначеЕсли СтрНайти(ТекущCтрока, "{") = 0 И СтрНайти(ТекущCтрока, "}") = 0 Тогда // "          aircraftAvailability   "
			//	Объект.ТекстЗапроса = Объект.ТекстЗапроса + " " + СокрЛП(ТекущCтрока);
			//КонецЕсли;
	КонецЦикла;

КонецФункции

&НаСервере
Функция ПроверитьПодчиненностьЭлемента(Родитель)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СписокЭлементовЗапроса.Представление КАК Представление
		|ИЗ
		|	Справочник.СписокЭлементовЗапроса КАК СписокЭлементовЗапроса
		|ГДЕ
		|	СписокЭлементовЗапроса.Родитель.Наименование = &Родитель";
	Запрос.УстановитьПараметр("Родитель", Родитель);

	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь;
	Иначе 
		Возврат Истина;    
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ОтобразитьСписокЭлементов(Команда)

	Если ЭтаФорма.Элементы.ГруппаЭлементыЗапроса.Видимость Тогда 
		ЭтаФорма.Элементы.ГруппаЭлементыЗапроса.Видимость = Ложь 
	Иначе 
		ЭтаФорма.Элементы.ГруппаЭлементыЗапроса.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьИскходныйТекст(Команда)

	Если ЭтаФорма.Элементы.ГруппаФорматированногоДокументаЗапроса.Видимость Тогда 
		ЭтаФорма.Элементы.ГруппаФорматированногоДокументаЗапроса.Видимость = Ложь 
	Иначе 
		ЭтаФорма.Элементы.ГруппаФорматированногоДокументаЗапроса.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьГрафСхему(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
	ПоказатьПредупреждение(Оповещение, "Данный функционал находится в разработке! ", 0, "Внимание!");	

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	 Если СтрЧислоСтрок(ДокументЗапроса.ПолучитьТекст()) = 0 Тогда 
		Отказ = Истина; 
		Возврат;
	КонецЕсли;

		 Если СтрЧислоВхождений(ДокументЗапроса.ПолучитьТекст(), "{") <> СтрЧислоВхождений(ДокументЗапроса.ПолучитьТекст(), "}") Тогда
			Сообщить("Внимание! Количество открытых фигурных скобок неравно закрытых, проверьте текст запроса!");
			Отказ = Истина;
			Возврат; 
		 КонецЕсли;

		 Если СтрЧислоВхождений(ДокументЗапроса.ПолучитьТекст(), "(") <> СтрЧислоВхождений(ДокументЗапроса.ПолучитьТекст(), ")") Тогда
			Сообщить("Внимание! Количество открытых круглых скобок неравно закрытых, проверьте текст запроса!");
			Отказ = Истина; 
			Возврат;
		 КонецЕсли;

	СформироватьЗапросНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ЭлементыЗапросаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если ЭтаФорма.Элементы.ГруппаФорматированногоДокументаЗапроса.Видимость = Ложь Тогда
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
			ПоказатьПредупреждение(Оповещение, "Включите отображене поле исходного текста запроса! ", 0, "Внимание!");
		Возврат;
	КонецЕсли;

	Если ЭтаФорма.Элементы.ЭлементыЗапроса.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	ДобавитьТекстВДокументЗапроса(ВыбраннаяСтрока);

	//Если ДобавитьВТекстЗапросаНаСервере(РезултТекСтрока) Тогда 
	//	ДокументЗапроса = ДокументЗапроса + 
	//	ЭтаФорма.Элементы.ЭлементыЗапроса.ТекущиеДанные.Наименование + Символы.ПС + Символы.Таб + "{" + Символы.ПС + Символы.ПС +  Символы.Таб + "}" + Символы.ПС;
	//Иначе 
	//	ДокументЗапроса = ДокументЗапроса + ЭтаФорма.Элементы.ЭлементыЗапроса.ТекущиеДанные.Наименование + "," + Символы.ПС;
	//КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьТекстВДокументЗапроса(ВыбраннаяСтрока)

	Если ТипЗнч(ВыбраннаяСтрока) <> Тип("Массив") Тогда 
		Возврат;
	КонецЕсли;  
	
	Если ВыбраннаяСтрока.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	РегРодитель = Ложь;
	ЗакладкаНачало = 0;
	ЗакладкаКонец = 0;
	Элементы.ДокументЗапросаФорм.ПолучитьГраницыВыделения(ЗакладкаНачало, ЗакладкаКонец);

	Для Каждого ВыбранСтрока Из ВыбраннаяСтрока Цикл

		Если ДобавитьВТекстЗапросаНаСервере(ВыбранСтрока.Наименование) Тогда 
			ДобавочнТекст = ВыбранСтрока.Наименование + Символы.ПС + Символы.Таб + "{" + Символы.ПС; 
			РегРодитель = Истина;
		Иначе 
			ДобавочнТекст = ВыбранСтрока.Наименование + "," + Символы.ПС;
		КонецЕсли;

		ДокументЗапроса.Вставить(ЗакладкаНачало, ДобавочнТекст, ТипЭлементаФорматированногоДокумента.Текст);
	КонецЦикла;

	Если РегРодитель Тогда
		ДокументЗапроса.Вставить(ЗакладкаНачало, Символы.ПС +  Символы.Таб + "}" + Символы.ПС, ТипЭлементаФорматированногоДокумента.Текст);
	КонецЕсли;

КонецПроцедуры

// ДокументЗапроса – реквизит формы типа ФорматированныйДокумент
// ДокументЗапросаФорм – элемент формы типа Поле форматированного документа
// Начало – реквизит формы типа Число. Указывает позицию начала выделения.
// Окончание – реквизит формы типа Число. Указывает позицию окончания выделения.
&НаКлиенте
Процедура ПолучитьВыделение(Команда)
	
	Начало = 0;
	Окончание = 0;
	Элементы.ДокументЗапросаФорм.ПолучитьГраницыВыделения(Начало, Окончание);
	Начало = ДокументЗапроса.ПолучитьПозициюПоЗакладке(Начало);
	Окончание = ДокументЗапроса.ПолучитьПозициюПоЗакладке(Окончание);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВыделение(Команда)

	Начало = ДокументЗапроса.ПолучитьЗакладкуПоПозиции(Начало);
	Окончание = ДокументЗапроса.ПолучитьЗакладкуПоПозиции(Начало);
	Элементы.ДокументЗапросаФорм.УстановитьГраницыВыделения(Начало, Окончание);

КонецПроцедуры




&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.ДокументЗапросаХранЗнач = Новый ХранилищеЗначения(ДокументЗапроса);
КонецПроцедуры

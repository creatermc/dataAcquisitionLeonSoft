
Функция ПолучитьВременныйТокен(СервисЛеон, ПолучитьНовыйТокен = Ложь) Экспорт
	
	//СервисЛеон = РаботаСВнешнимиСервисамиПовтИсп.ПолучитьСервисЛеон();
	
	Если НЕ ЗначениеЗаполнено(СервисЛеон) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ СервисЛеон.ИспользоватьСервис Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеТокена = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(СервисЛеон, "ВремяТокена, ТокенОбновления, ТокенАвторизации, Токен");
	
	Если ДанныеТокена.ВремяТокена = Неопределено Тогда
		ПолучитьНовыйТокен = Истина;
	Иначе
		//Токен живёт полчаса. Если он старше получаса, его надо обновить. Запас 1 минута
		Если ТекущаяДата() - ДанныеТокена.ВремяТокена > 1740 Тогда
			ПолучитьНовыйТокен = Истина;
		КонецЕсли;
		Если ДанныеТокена.ТокенАвторизации = "" Тогда
			ПолучитьНовыйТокен = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьНовыйТокен Тогда
		Соединение = Новый HTTPСоединение(СервисЛеон.АдресАпи, 443, , , , , Новый ЗащищенноеСоединениеOpenSSL());
		Запрос = Новый HTTPЗапрос("/access_token/refresh/");
		Запрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
		Запрос.УстановитьТелоИзСтроки("refresh_token=" + ДанныеТокена.ТокенОбновления);
		Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос);
		НовыйТокен = Ответ.ПолучитьТелоКакСтроку();
		
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(СервисЛеон, НовыйТокен, "ТокенАвторизации");
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(СервисЛеон, ТекущаяДата(), "ВремяТокена");
		Возврат НовыйТокен;
	Иначе
		Возврат ДанныеТокена.ТокенАвторизации;
	КонецЕсли;
	
КонецФункции

Функция Ответ(СтрокаЗапроса, СервисЛеон) Экспорт
		
	Если НЕ ЗначениеЗаполнено(СервисЛеон) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ СервисЛеон.ИспользоватьСервис Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВременныйТокен = ПолучитьВременныйТокен(СервисЛеон);
	Соединение = Новый HTTPСоединение(СервисЛеон.АдресАпи,443, , ,,, Новый ЗащищенноеСоединениеOpenSSL());
	Запрос = Новый HTTPЗапрос("/api/graphql/");
	Запрос.Заголовки.Вставить("Content-Type", "application/json");
	Запрос.Заголовки.Вставить("Authorization", "Bearer " + ВременныйТокен);
	Запрос.УстановитьТелоИзСтроки(СтрокаЗапроса);
	Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос);
	Результат = КоннекторHTTP.JsonВОбъект(Ответ.ПолучитьТелоКакДвоичныеДанные(),,Новый структура("ПрочитатьВСоответствие",Ложь));
	
	Возврат Результат;

КонецФункции

Процедура ОбменЛеон() Экспорт
	ПолучитьИзмененияРейсов();
КонецПроцедуры

Процедура ПолучитьРейсы(ДатаНачала, ДатаОкончания, РейсЭмптиЛег = Ложь) Экспорт
	
	ИспользоватьЭкипаж = Константы.ИспользоватьЭкипаж.Получить();
	Запрос = Справочники.ЗапросыГрафКуЭл.НайтиПоНаименованию("Рейсы", Истина);
	ТекстЗапроса = Запрос.ТекстЗапроса;
	ДатаНач = ЗаписатьДатуJSON(ДатаНачала, ФорматДатыJSON.ISO);
	ДатаКон = ЗаписатьДатуJSON(ДатаОкончания, ФорматДатыJSON.ISO);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДатаНачала", ДатаНач);  
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДатаОкончания", ДатаКон);  
	
	Сервис = РаботаСВнешнимиСервисамиПовтИсп.ПолучитьСервисЛеон();

	Ответ = Ответ(ТекстЗапроса, Сервис);
	
	Для Каждого рс Из Ответ.data.flightList Цикл
		СформироватьРейс(рс, Истина, ИспользоватьЭкипаж, Сервис, РейсЭмптиЛег);
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьРейс(рс, ПерезаписыватьВС = Ложь, ИспользоватьЭкипаж, Сервис, РейсЭмптиЛег = Ложь)
	
	НужноЗаписыватьСоответствие = Ложь;
	ИдентификаторОбъектаСервиса = рс.flightNid;
	РейсСсылка = ПолучитьОбъектВнешнегоСервиса(Сервис, рс.flightNid, "Flight");
	Если РейсСсылка = Неопределено Тогда
		НужноЗаписыватьСоответствие = Истина;
		РейсОбъект = Документы.Рейс.СоздатьДокумент();
		РейсОбъект.Дата = ТекущаяДата();
	Иначе		
		РейсОбъект = РейсСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	АэропортВылета = Справочники.Аэропорты.НайтиПоКоду(рс.startAirport.code.icao);
	Если Не ЗначениеЗаполнено(АэропортВылета) Тогда
		АэропортВылета = Справочники.Аэропорты.НайтиПоКоду("ZZZZ");
	КонецЕсли;
	АэропортПрилета = Справочники.Аэропорты.НайтиПоКоду(рс.endAirport.code.icao);
	Если Не ЗначениеЗаполнено(АэропортПрилета) Тогда
		АэропортПрилета = Справочники.Аэропорты.НайтиПоКоду("ZZZZ");
	КонецЕсли;
	РейсОбъект.НомерРейса = рс.flightNo;

		Если РейсЭмптиЛег Тогда
			РейсОбъект.ТекущееСостояние = Перечисления.СтатусыРейса.Подтвержден;
			РейсОбъект.Активный = Истина;
		Иначе  
			Если рс.isCnl Тогда
				РейсОбъект.ТекущееСостояние = Перечисления.СтатусыРейса.Отменен;
				РейсОбъект.Активный = Ложь;
				РейсОбъект.ПометкаУдаления = Истина;
				РегистрыСведений.СоответствияОбъектовСВнешнимиСервисами.УдалитьСоответствиеОбъектаВнешнегоСервиса(РейсОбъект.Ссылка, Сервис, "Flight");
			Иначе
				РейсОбъект.ТекущееСостояние = Перечисления.СтатусыРейса.Подтвержден;
				РейсОбъект.Активный = Истина;
			КонецЕсли;
		КонецЕсли;

	РейсОбъект.АэропортВылета = АэропортВылета;
	РейсОбъект.АэропортПрилета = АэропортПрилета;
	РейсОбъект.ДатаВылета = ПрочитатьДатуJSON(рс.startTimeUTC, ФорматДатыJSON.ISO);
	РейсОбъект.ДатаПрилета = ПрочитатьДатуJSON(рс.endTimeUTC, ФорматДатыJSON.ISO);
	Если ЗначениеЗаполнено(рс.acft) Тогда
		ВС = ПолучитьОбъектВнешнегоСервиса(Сервис, рс.acft.acftNid,"Aircraft");
		Если ВС = Неопределено ИЛИ ПерезаписыватьВС Тогда
			ВС = СоздатьВС(рс.acft.acftNid, ВС);
		КонецЕсли;
		
		РейсОбъект.ВС = ВС;
	КонецЕсли;
	
	РейсОбъект.Экипаж.Очистить();
	Документы.Рейс.ЗаполнитьСоставЭкипажа(РейсОбъект);
	
				Если ИспользоватьЭкипаж Тогда
					Попытка
						Для Каждого кр Из рс.crewList Цикл
							Поиск = Новый Структура;
							Поиск.Вставить("Роль",);
							поиск.Вставить("Сотрудник",Справочники.Сотрудники.ПустаяСсылка());
							
							эк = РейсОбъект.Экипаж.Добавить();
							Если кр.isFlightAttendant Тогда
								ТекРоль = Справочники.РолиСотрудников.НайтиПоНаименованию("Бортпроводник");
							КонецЕсли;
							Если кр.isFirstOfficer Тогда
								ТекРоль = Справочники.РолиСотрудников.НайтиПоНаименованию("Второй пилот");
							КонецЕсли;
							Если кр.isCaptain Тогда
								эк.Роль = Справочники.РолиСотрудников.НайтиПоНаименованию("КВС");
							КонецЕсли;
							
							эк.Роль = ТекРоль;
							эк.Назначение = эк.Роль.Наименование;
							эк.Комментарий = Перечисления.НазначениеЭкипажа.ОсновнойЭкипаж;
							эк.СортировкаЭкипажа = 1;
							
							Сотрудник = ПолучитьОбъектВнешнегоСервиса(Сервис, кр.contact.contactNid, "contact");
							Если Сотрудник = Неопределено Тогда
								Сотрудник = СоздатьСотрудника(кр.contact.contactNid, кр.contact.commonName);
							КонецЕсли;
							
							эк.Сотрудник = Сотрудник;
						КонецЦикла;			
					Исключение		
					КонецПопытки;
				КонецЕсли;
			
		Попытка
			РейсОбъект.КоличествоПассажиров = рс.passengerList.count;
		Исключение
			РейсОбъект.КоличествоПассажиров = ?(РейсЭмптиЛег, 0, 1);
		КонецПопытки;

	РейсОбъект.СозданВручную = Истина;
	
	Если РейсОбъект.ПометкаУдаления Тогда 
		РейсОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	Иначе 
		РейсОбъект.Записать();
	КонецЕсли;

	Если НужноЗаписыватьСоответствие Тогда
		РегистрыСведений.СоответствияОбъектовСВнешнимиСервисами.ЗаписатьСоответствиеОбъектаВнешнегоСервиса(РейсОбъект.Ссылка, Сервис, Формат(ИдентификаторОбъектаСервиса, "ЧГ="), "Flight");	
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьИзмененияРейсов() Экспорт

	Сервис = РаботаСВнешнимиСервисамиПовтИсп.ПолучитьСервисЛеон();
	ДатаНовогоЗапроса = ТекущаяУниверсальнаяДата();	
	ДатаЗапросаРейсов = ?(Константы.ДатаЗапросаЛеон.Получить() = Дата(1,1,1), ТекущаяУниверсальнаяДата(), Константы.ДатаЗапросаЛеон.Получить());  // + 86400 на время теста, иначе error "Given time out of range" 
	ИспользоватьЭкипаж = Константы.ИспользоватьЭкипаж.Получить();
	
	Если ДатаЗапросаРейсов = Дата(1,1,1) Тогда
		ПолучитьРейсы(ДобавитьМесяц(ТекущаяДата(),-1), ДобавитьМесяц(ТекущаяДата(),12));			
	Иначе
		Запрос = Справочники.ЗапросыГрафКуЭл.НайтиПоНаименованию("Рейсы изменения", Истина);
		ТекстЗапроса = Запрос.ТекстЗапроса;
		ДатаИзменения = ЗаписатьДатуJSON(ДатаЗапросаРейсов, ФорматДатыJSON.ISO);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДатаИзменения", ДатаИзменения);  
		
		Ответ = Ответ(ТекстЗапроса, Сервис);
		
		Для Каждого рс Из Ответ.data.flights.getModifiedFlightList.changed Цикл
			СформироватьРейс(рс, ,ИспользоватьЭкипаж, Сервис);
		КонецЦикла;
		
		Для Каждого рс Из Ответ.data.flights.getModifiedFlightList.created Цикл
			СформироватьРейс(рс, ,ИспользоватьЭкипаж, Сервис);
		КонецЦикла;
		
		Для Каждого рс Из Ответ.data.flights.getModifiedFlightList.deleted Цикл
			РейсСсылка = ПолучитьОбъектВнешнегоСервиса(Сервис,Формат(рс.flightNid,"ЧГ="),"Flight");
			Если ЗначениеЗаполнено(РейсСсылка) Тогда
				РейсОб = РейсСсылка.ПолучитьОбъект();
			КонецЕсли;
			РейсОб.ПометкаУдаления = Истина;
			РейсОб.Активный = Ложь;
			РейсОб.ТекущееСостояние = Перечисления.СтатусыРейса.Отменен;
			РейсОб.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЦикла;
	КонецЕсли;
	
	Константы.ДатаЗапросаЛеон.Установить(ДатаНовогоЗапроса);
	// как альтернатива 
	//Константы.ДатаЗапросаЛеон.Установить(Дата(1,1,1,3,0,0) + ТекущаяУниверсальнаяДатаВМиллисекундах()/1000;
	// если по UTC то  Дата(1,1,1) + ТекущаяУниверсальнаяДатаВМиллисекундах()/1000

КонецПроцедуры

Процедура ПолучитьЭмптиЛегиРейсов() Экспорт

	Сервис = РаботаСВнешнимиСервисамиПовтИсп.ПолучитьСервисЛеон();
	ДатаНовогоЗапроса = ТекущаяУниверсальнаяДата();	
	ДатаЗапросаРейсов = ?(Константы.ДатаЗапросаЛеон.Получить() = Дата(1,1,1), ТекущаяУниверсальнаяДата(), Константы.ДатаЗапросаЛеон.Получить());  // + 86400 на время теста, иначе error "Given time out of range" 
	ИспользоватьЭкипаж = Константы.ИспользоватьЭкипаж.Получить();
	
	Если ДатаЗапросаРейсов = Дата(1,1,1) Тогда
		ПолучитьРейсы(ДобавитьМесяц(ТекущаяДата(),-1), ДобавитьМесяц(ТекущаяДата(),12), Истина);			
	Иначе
		Запрос = Справочники.ЗапросыГрафКуЭл.НайтиПоНаименованию("ЭмптиЛеги", Истина);
		ТекстЗапроса = Запрос.ТекстЗапроса;
		ДатаНачала = ЗаписатьДатуJSON(ДатаЗапросаРейсов, ФорматДатыJSON.ISO);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДатаНачала", ДатаНачала);  
		
		Ответ = Ответ(ТекстЗапроса, Сервис);

		Для Каждого рс Из Ответ.data.aircraftAvailability.emptyLegList Цикл
			СформироватьРейс(рс, ,ИспользоватьЭкипаж, Сервис, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Константы.ДатаЗапросаЛеон.Установить(ДатаНовогоЗапроса);

КонецПроцедуры

Функция СоздатьВС(ИдВСЛеон, ВССсылка = Неопределено) Экспорт 
	
	Сервис = РаботаСВнешнимиСервисамиПовтИсп.ПолучитьСервисЛеон();
	Запрос = Справочники.ЗапросыГрафКуЭл.НайтиПоНаименованию("Самолет");
	ТекстЗапроса = Запрос.ТекстЗапроса;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИдСамолета", Формат(ИдВСЛеон,"ЧГ="));  
	
	Ответ = Ответ(ТекстЗапроса, Сервис);
	
	Если ВССсылка = Неопределено Тогда
		ВС = Справочники.Вс.СоздатьЭлемент();
	Иначе
		ВС = ВССсылка.ПолучитьОбъект();
	КонецЕсли;
	
	ВС.Наименование = Ответ.data.aircraft.registration;
	
	Модификация = Справочники.МодификацияТипыВС.НайтиПоНаименованию(Ответ.data.aircraft.acftTypeName);
	ТипВС = Справочники.ТипыВС.НайтиПоКоду(Ответ.data.aircraft.acftType.iCAO);
	
	Если НЕ ЗначениеЗаполнено(ТипВС) Тогда
		ТипВСоб = Справочники.ТипыВС.СоздатьЭлемент();
		ТипВСоб.Наименование = Ответ.data.aircraft.acftType.iCAO;
		ТипВСоб.Код = Ответ.data.aircraft.acftType.iCAO;
		ТипВСоб.Записать();
		ТипВС = ТипВСоб.Ссылка;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Модификация) Тогда
		МодификацияОб = Справочники.МодификацияТипыВС.СоздатьЭлемент();
		МодификацияОб.Наименование = Ответ.data.aircraft.acftTypeName;
		МодификацияОб.Владелец = ТипВС;
		МодификацияОб.Записать();
	КонецЕсли;
		
	ВС.МодификацияТипыВС = Справочники.МодификацияТипыВС.НайтиПоНаименованию(Ответ.data.aircraft.acftTypeName);
	ВС.ТипВС = ВС.МодификацияТипыВС.Владелец;	
	
	ВС.КоличествоПассажиров = Ответ.data.aircraft.paxCapacity;
	ВС.ГодВыпуска = Ответ.data.aircraft.yearOfProduction;
	ВС.ГодОбновленияСалона = Ответ.data.aircraft.yearOfRefurbishment;
	
	ВС.МВМ = Ответ.data.aircraft.acftType.defaultMtowInKg;
	
	Если ЗначениеЗаполнено(Ответ.data.aircraft.homeBase) Тогда
		ВС.АэропортБазирования = Справочники.Аэропорты.НайтиПоКоду(Ответ.data.aircraft.homeBase.code.icao);
	КонецЕсли;
	
	ВС.Код = ВС.Наименование;
	
	попытка
	ВС.Записать();
	РегистрыСведений.СоответствияОбъектовСВнешнимиСервисами.ЗаписатьСоответствиеОбъектаВнешнегоСервиса(ВС.Ссылка, Сервис, Формат(ИдВСЛеон, "ЧГ="), "Aircraft");
	Возврат ВС.Ссылка;
	
исключение
	ВСКоррект = Справочники.ВС.НайтиПоКоду(ВС.Код, Истина);
	РегистрыСведений.СоответствияОбъектовСВнешнимиСервисами.ЗаписатьСоответствиеОбъектаВнешнегоСервиса(ВСКоррект.Ссылка, Сервис, Формат(ИдВСЛеон, "ЧГ="), "Aircraft");
	Возврат ВСКоррект.Ссылка;
	
КонецПопытки;
	

КонецФункции

Функция СоздатьСотрудника(ИдСотрудника, НаименованиеСотрудника)
	
	Сервис = РаботаСВнешнимиСервисамиПовтИсп.ПолучитьСервисЛеон();
	Запрос = Справочники.ЗапросыГрафКуЭл.НайтиПоНаименованию("Сотрудник");
	ТекстЗапроса = Запрос.ТекстЗапроса;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НаименованиеСотрудника", "\"""+НаименованиеСотрудника+"\""");  
	
	Ответ = Ответ(ТекстЗапроса, Сервис);
	
	Для Каждого сот Из Ответ.data.contactByWildcard Цикл
		Если сот.contactNid = ИдСотрудника Тогда
			НовыйСотрудник = Справочники.Сотрудники.СоздатьЭлемент();
			НовыйСотрудник.Наименование = НаименованиеСотрудника;
			НовыйСотрудник.Записать();
		КонецЕсли;
	КонецЦикла;
	
	РегистрыСведений.СоответствияОбъектовСВнешнимиСервисами.ЗаписатьСоответствиеОбъектаВнешнегоСервиса(НовыйСотрудник.Ссылка, Сервис, Формат(ИдСотрудника, "ЧГ="), "Contact");
	
	Возврат НовыйСотрудник.Ссылка;
	
КонецФункции

Функция ПолучитьОбъектВнешнегоСервиса(Сервис, ИдентификаторОбъектаСервиса, ВидОбъектаСервиса)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоответствияОбъектовСВнешнимиСервисами.ОбъектНаджет КАК ОбъектНаджет
		|ИЗ
		|	РегистрСведений.СоответствияОбъектовСВнешнимиСервисами КАК СоответствияОбъектовСВнешнимиСервисами
		|ГДЕ
		|	СоответствияОбъектовСВнешнимиСервисами.Сервис = &Сервис
		|	И СоответствияОбъектовСВнешнимиСервисами.ИдентификаторОбъектаСервиса = &ИдентификаторОбъектаСервиса
		|	И СоответствияОбъектовСВнешнимиСервисами.ВидОбъектаСервиса = &ВидОбъектаСервиса";
	
	Запрос.УстановитьПараметр("ВидОбъектаСервиса", ВидОбъектаСервиса);
	Запрос.УстановитьПараметр("ИдентификаторОбъектаСервиса", Формат(ИдентификаторОбъектаСервиса,"ЧГ="));
	Запрос.УстановитьПараметр("Сервис", Сервис);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.ОбъектНаджет;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьОтветНаЗапросЛеонСофт(ЗапросТекст, ВнешнийСервис) Экспорт

// получить все события по ВС
// получить все события по Экипажу Field "aircraftActivities" of type "AircraftActivitiesSection!" must have a sub selection.

	Если ВнешнийСервис = Справочники.ВнешниеСервисы.ПустаяСсылка() Или ВнешнийСервис = Неопределено Тогда
		ВызватьИсключение("Не заполнены настройки по внешнему сервису Leon");
		Возврат Неопределено; 
	КонецЕсли;

	Ответ = Ответ(ЗапросТекст, ВнешнийСервис);

	Если Ответ = Неопределено Тогда 
		Возврат Неопределено;	
	КонецЕсли;

		Если  Ответ.Свойство("errors")  Тогда 
			ВызватьИсключение(Ответ.errors[0].message);
			Возврат Неопределено;
		КонецЕсли;

	Возврат Неопределено;

КонецФункции

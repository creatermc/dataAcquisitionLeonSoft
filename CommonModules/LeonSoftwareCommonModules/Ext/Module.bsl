
Функция ПолучитьВременныйТокен(СервисЛеон, ПолучитьНовыйТокен = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СервисЛеон) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ СервисЛеон.ИспользоватьСервис Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеТокена = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(СервисЛеон, "ВремяТокена, ТокенОбновления, ТокенАвторизации, Токен");
	
	Если ДанныеТокена.ВремяТокена = Неопределено Тогда
		ПолучитьНовыйТокен = Истина;
	Иначе
		//Токен живёт полчаса. Если он старше получаса, его надо обновить. Запас 1 минута
		Если ТекущаяДата() - ДанныеТокена.ВремяТокена > 1740 Тогда
			ПолучитьНовыйТокен = Истина;
		КонецЕсли;
		Если ДанныеТокена.ТокенАвторизации = "" Тогда
			ПолучитьНовыйТокен = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьНовыйТокен Тогда
		Соединение = Новый HTTPСоединение(СервисЛеон.АдресАпи, 443, , , , , Новый ЗащищенноеСоединениеOpenSSL());
		Запрос = Новый HTTPЗапрос("/access_token/refresh/");
		Запрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
		Запрос.УстановитьТелоИзСтроки("refresh_token=" + ДанныеТокена.ТокенОбновления);
		Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос);
		НовыйТокен = Ответ.ПолучитьТелоКакСтроку();
		
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(СервисЛеон, НовыйТокен, "ТокенАвторизации");
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(СервисЛеон, ТекущаяДата(), "ВремяТокена");
		Возврат НовыйТокен;
	Иначе
		Возврат ДанныеТокена.ТокенАвторизации;
	КонецЕсли;
	
КонецФункции

Функция Ответ(СтрокаЗапроса, СервисЛеон) Экспорт
		
	Если НЕ ЗначениеЗаполнено(СервисЛеон) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ СервисЛеон.ИспользоватьСервис Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВременныйТокен = ПолучитьВременныйТокен(СервисЛеон);
	Соединение = Новый HTTPСоединение(СервисЛеон.АдресАпи,443, , ,,, Новый ЗащищенноеСоединениеOpenSSL());
	Запрос = Новый HTTPЗапрос("/api/graphql/");
	Запрос.Заголовки.Вставить("Content-Type", "application/json");
	Запрос.Заголовки.Вставить("Authorization", "Bearer " + ВременныйТокен);
	Запрос.УстановитьТелоИзСтроки(СтрокаЗапроса);
	Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос);
	Результат = КоннекторHTTP.JsonВОбъект(Ответ.ПолучитьТелоКакДвоичныеДанные(),,Новый структура("ПрочитатьВСоответствие",Ложь));
	
	Возврат Результат;

КонецФункции

Процедура ОбменЛеон() Экспорт
	ПолучитьИзмененияРейсов();
КонецПроцедуры

Процедура ПолучитьРейсы(ДатаНачала, ДатаОкончания, РейсЭмптиЛег = Ложь) Экспорт
	
	ИспользоватьЭкипаж = Константы.ИспользоватьЭкипаж.Получить();
	Запрос = Справочники.ЗапросыГрафКуЭл.НайтиПоНаименованию("Рейсы", Истина);
	ТекстЗапроса = Запрос.ТекстЗапроса;
	ДатаНач = ЗаписатьДатуJSON(ДатаНачала, ФорматДатыJSON.ISO);
	ДатаКон = ЗаписатьДатуJSON(ДатаОкончания, ФорматДатыJSON.ISO);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДатаНачала", ДатаНач);  
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДатаОкончания", ДатаКон);  
	
	Сервис = РаботаСВнешнимиСервисамиПовтИсп.ПолучитьСервисЛеон();

	Ответ = Ответ(ТекстЗапроса, Сервис);
	
	Для Каждого рс Из Ответ.data.flightList Цикл
		СформироватьРейс(рс, Истина, ИспользоватьЭкипаж, Сервис, РейсЭмптиЛег);
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьРейс(рс, ПерезаписыватьВС = Ложь, ИспользоватьЭкипаж, Сервис, РейсЭмптиЛег = Ложь)
	
	НужноЗаписыватьСоответствие = Ложь;
	ИдентификаторОбъектаСервиса = рс.flightNid;
	РейсСсылка = ПолучитьОбъектВнешнегоСервиса(Сервис, рс.flightNid, "Flight");
	Если РейсСсылка = Неопределено Тогда
		НужноЗаписыватьСоответствие = Истина;
		РейсОбъект = Документы.Рейс.СоздатьДокумент();
		РейсОбъект.Дата = ТекущаяДата();
	Иначе		
		РейсОбъект = РейсСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	АэропортВылета = Справочники.Аэропорты.НайтиПоКоду(рс.startAirport.code.icao);
	Если Не ЗначениеЗаполнено(АэропортВылета) Тогда
		АэропортВылета = Справочники.Аэропорты.НайтиПоКоду("ZZZZ");
	КонецЕсли;
	АэропортПрилета = Справочники.Аэропорты.НайтиПоКоду(рс.endAirport.code.icao);
	Если Не ЗначениеЗаполнено(АэропортПрилета) Тогда
		АэропортПрилета = Справочники.Аэропорты.НайтиПоКоду("ZZZZ");
	КонецЕсли;
	РейсОбъект.НомерРейса = рс.flightNo;

		Если РейсЭмптиЛег Тогда
			РейсОбъект.ТекущееСостояние = Перечисления.СтатусыРейса.Подтвержден;
			РейсОбъект.Активный = Истина;
		Иначе  
			Если рс.isCnl Тогда
				РейсОбъект.ТекущееСостояние = Перечисления.СтатусыРейса.Отменен;
				РейсОбъект.Активный = Ложь;
				РейсОбъект.ПометкаУдаления = Истина;
				РегистрыСведений.СоответствияОбъектовСВнешнимиСервисами.УдалитьСоответствиеОбъектаВнешнегоСервиса(РейсОбъект.Ссылка, Сервис, "Flight");
			Иначе
				РейсОбъект.ТекущееСостояние = Перечисления.СтатусыРейса.Подтвержден;
				РейсОбъект.Активный = Истина;
			КонецЕсли;
		КонецЕсли;

	РейсОбъект.АэропортВылета = АэропортВылета;
	РейсОбъект.АэропортПрилета = АэропортПрилета;
	РейсОбъект.ДатаВылета = ПрочитатьДатуJSON(рс.startTimeUTC, ФорматДатыJSON.ISO);
	РейсОбъект.ДатаПрилета = ПрочитатьДатуJSON(рс.endTimeUTC, ФорматДатыJSON.ISO);
	Если ЗначениеЗаполнено(рс.acft) Тогда
		ВС = ПолучитьОбъектВнешнегоСервиса(Сервис, рс.acft.acftNid,"Aircraft");
		Если ВС = Неопределено ИЛИ ПерезаписыватьВС Тогда
			ВС = СоздатьВС(рс.acft.acftNid, ВС);
		КонецЕсли;
		
		РейсОбъект.ВС = ВС;
	КонецЕсли;
	
	РейсОбъект.Экипаж.Очистить();
	Документы.Рейс.ЗаполнитьСоставЭкипажа(РейсОбъект);
	
				Если ИспользоватьЭкипаж Тогда
					Попытка
						Для Каждого кр Из рс.crewList Цикл
							Поиск = Новый Структура;
							Поиск.Вставить("Роль",);
							поиск.Вставить("Сотрудник",Справочники.Сотрудники.ПустаяСсылка());
							
							эк = РейсОбъект.Экипаж.Добавить();
							Если кр.isFlightAttendant Тогда
								ТекРоль = Справочники.РолиСотрудников.НайтиПоНаименованию("Бортпроводник");
							КонецЕсли;
							Если кр.isFirstOfficer Тогда
								ТекРоль = Справочники.РолиСотрудников.НайтиПоНаименованию("Второй пилот");
							КонецЕсли;
							Если кр.isCaptain Тогда
								эк.Роль = Справочники.РолиСотрудников.НайтиПоНаименованию("КВС");
							КонецЕсли;
							
							эк.Роль = ТекРоль;
							эк.Назначение = эк.Роль.Наименование;
							эк.Комментарий = Перечисления.НазначениеЭкипажа.ОсновнойЭкипаж;
							эк.СортировкаЭкипажа = 1;
							
							Сотрудник = ПолучитьОбъектВнешнегоСервиса(Сервис, кр.contact.contactNid, "contact");
							Если Сотрудник = Неопределено Тогда
								Сотрудник = СоздатьСотрудника(кр.contact.contactNid, кр.contact.commonName);
							КонецЕсли;
							
							эк.Сотрудник = Сотрудник;
						КонецЦикла;			
					Исключение		
					КонецПопытки;
				КонецЕсли;
			
		Попытка
			РейсОбъект.КоличествоПассажиров = рс.passengerList.count;
		Исключение
			РейсОбъект.КоличествоПассажиров = ?(РейсЭмптиЛег, 0, 1);
		КонецПопытки;

	РейсОбъект.СозданВручную = Истина;
	
	Если РейсОбъект.ПометкаУдаления Тогда 
		РейсОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	Иначе 
		РейсОбъект.Записать();
	КонецЕсли;

	Если НужноЗаписыватьСоответствие Тогда
		РегистрыСведений.СоответствияОбъектовСВнешнимиСервисами.ЗаписатьСоответствиеОбъектаВнешнегоСервиса(РейсОбъект.Ссылка, Сервис, Формат(ИдентификаторОбъектаСервиса, "ЧГ="), "Flight");	
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьИзмененияРейсов() Экспорт

	Сервис = РаботаСВнешнимиСервисамиПовтИсп.ПолучитьСервисЛеон();
	ДатаНовогоЗапроса = ТекущаяУниверсальнаяДата();	
	ДатаЗапросаРейсов = ?(Константы.ДатаЗапросаЛеон.Получить() = Дата(1,1,1), ТекущаяУниверсальнаяДата(), Константы.ДатаЗапросаЛеон.Получить());  // + 86400 на время теста, иначе error "Given time out of range" 
	ИспользоватьЭкипаж = Константы.ИспользоватьЭкипаж.Получить();
	
	Если ДатаЗапросаРейсов = Дата(1,1,1) Тогда
		ПолучитьРейсы(ДобавитьМесяц(ТекущаяДата(),-1), ДобавитьМесяц(ТекущаяДата(),12));			
	Иначе
		Запрос = Справочники.ЗапросыГрафКуЭл.НайтиПоНаименованию("Рейсы изменения", Истина);
		ТекстЗапроса = Запрос.ТекстЗапроса;
		ДатаИзменения = ЗаписатьДатуJSON(ДатаЗапросаРейсов, ФорматДатыJSON.ISO);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДатаИзменения", ДатаИзменения);  
		
		Ответ = Ответ(ТекстЗапроса, Сервис);
		
		Для Каждого рс Из Ответ.data.flights.getModifiedFlightList.changed Цикл
			СформироватьРейс(рс, ,ИспользоватьЭкипаж, Сервис);
		КонецЦикла;
		
		Для Каждого рс Из Ответ.data.flights.getModifiedFlightList.created Цикл
			СформироватьРейс(рс, ,ИспользоватьЭкипаж, Сервис);
		КонецЦикла;
		
		Для Каждого рс Из Ответ.data.flights.getModifiedFlightList.deleted Цикл
			РейсСсылка = ПолучитьОбъектВнешнегоСервиса(Сервис,Формат(рс.flightNid,"ЧГ="),"Flight");
			Если ЗначениеЗаполнено(РейсСсылка) Тогда
				РейсОб = РейсСсылка.ПолучитьОбъект();
			КонецЕсли;
			РейсОб.ПометкаУдаления = Истина;
			РейсОб.Активный = Ложь;
			РейсОб.ТекущееСостояние = Перечисления.СтатусыРейса.Отменен;
			РейсОб.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЦикла;
	КонецЕсли;
	
	Константы.ДатаЗапросаЛеон.Установить(ДатаНовогоЗапроса);
	// как альтернатива 
	//Константы.ДатаЗапросаЛеон.Установить(Дата(1,1,1,3,0,0) + ТекущаяУниверсальнаяДатаВМиллисекундах()/1000;
	// если по UTC то  Дата(1,1,1) + ТекущаяУниверсальнаяДатаВМиллисекундах()/1000

КонецПроцедуры

Процедура ПолучитьЭмптиЛегиРейсов() Экспорт

	Сервис = РаботаСВнешнимиСервисамиПовтИсп.ПолучитьСервисЛеон();
	ДатаНовогоЗапроса = ТекущаяУниверсальнаяДата();	
	ДатаЗапросаРейсов = ?(Константы.ДатаЗапросаЛеон.Получить() = Дата(1,1,1), ТекущаяУниверсальнаяДата(), Константы.ДатаЗапросаЛеон.Получить());  // + 86400 на время теста, иначе error "Given time out of range" 
	ИспользоватьЭкипаж = Константы.ИспользоватьЭкипаж.Получить();
	
	Если ДатаЗапросаРейсов = Дата(1,1,1) Тогда
		ПолучитьРейсы(ДобавитьМесяц(ТекущаяДата(),-1), ДобавитьМесяц(ТекущаяДата(),12), Истина);			
	Иначе
		Запрос = Справочники.ЗапросыГрафКуЭл.НайтиПоНаименованию("ЭмптиЛеги", Истина);
		ТекстЗапроса = Запрос.ТекстЗапроса;
		ДатаНачала = ЗаписатьДатуJSON(ДатаЗапросаРейсов, ФорматДатыJSON.ISO);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДатаНачала", ДатаНачала);  
		
		Ответ = Ответ(ТекстЗапроса, Сервис);

		Для Каждого рс Из Ответ.data.aircraftAvailability.emptyLegList Цикл
			СформироватьРейс(рс, ,ИспользоватьЭкипаж, Сервис, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Константы.ДатаЗапросаЛеон.Установить(ДатаНовогоЗапроса);

КонецПроцедуры

Функция СоздатьВС(ИдВСЛеон, ВССсылка = Неопределено) Экспорт 
	
	Сервис = РаботаСВнешнимиСервисамиПовтИсп.ПолучитьСервисЛеон();
	Запрос = Справочники.ЗапросыГрафКуЭл.НайтиПоНаименованию("Самолет");
	ТекстЗапроса = Запрос.ТекстЗапроса;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИдСамолета", Формат(ИдВСЛеон,"ЧГ="));  
	
	Ответ = Ответ(ТекстЗапроса, Сервис);
	
	Если ВССсылка = Неопределено Тогда
		ВС = Справочники.Вс.СоздатьЭлемент();
	Иначе
		ВС = ВССсылка.ПолучитьОбъект();
	КонецЕсли;
	
	ВС.Наименование = Ответ.data.aircraft.registration;
	
	Модификация = Справочники.МодификацияТипыВС.НайтиПоНаименованию(Ответ.data.aircraft.acftTypeName);
	ТипВС = Справочники.ТипыВС.НайтиПоКоду(Ответ.data.aircraft.acftType.iCAO);
	
	Если НЕ ЗначениеЗаполнено(ТипВС) Тогда
		ТипВСоб = Справочники.ТипыВС.СоздатьЭлемент();
		ТипВСоб.Наименование = Ответ.data.aircraft.acftType.iCAO;
		ТипВСоб.Код = Ответ.data.aircraft.acftType.iCAO;
		ТипВСоб.Записать();
		ТипВС = ТипВСоб.Ссылка;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Модификация) Тогда
		МодификацияОб = Справочники.МодификацияТипыВС.СоздатьЭлемент();
		МодификацияОб.Наименование = Ответ.data.aircraft.acftTypeName;
		МодификацияОб.Владелец = ТипВС;
		МодификацияОб.Записать();
	КонецЕсли;
		
	ВС.МодификацияТипыВС = Справочники.МодификацияТипыВС.НайтиПоНаименованию(Ответ.data.aircraft.acftTypeName);
	ВС.ТипВС = ВС.МодификацияТипыВС.Владелец;	
	
	ВС.КоличествоПассажиров = Ответ.data.aircraft.paxCapacity;
	ВС.ГодВыпуска = Ответ.data.aircraft.yearOfProduction;
	ВС.ГодОбновленияСалона = Ответ.data.aircraft.yearOfRefurbishment;
	
	ВС.МВМ = Ответ.data.aircraft.acftType.defaultMtowInKg;
	
	Если ЗначениеЗаполнено(Ответ.data.aircraft.homeBase) Тогда
		ВС.АэропортБазирования = Справочники.Аэропорты.НайтиПоКоду(Ответ.data.aircraft.homeBase.code.icao);
	КонецЕсли;
	
	ВС.Код = ВС.Наименование;
	
	попытка
	ВС.Записать();
	РегистрыСведений.СоответствияОбъектовСВнешнимиСервисами.ЗаписатьСоответствиеОбъектаВнешнегоСервиса(ВС.Ссылка, Сервис, Формат(ИдВСЛеон, "ЧГ="), "Aircraft");
	Возврат ВС.Ссылка;
	
исключение
	ВСКоррект = Справочники.ВС.НайтиПоКоду(ВС.Код, Истина);
	РегистрыСведений.СоответствияОбъектовСВнешнимиСервисами.ЗаписатьСоответствиеОбъектаВнешнегоСервиса(ВСКоррект.Ссылка, Сервис, Формат(ИдВСЛеон, "ЧГ="), "Aircraft");
	Возврат ВСКоррект.Ссылка;
	
КонецПопытки;
	

КонецФункции

Функция СоздатьСотрудника(ИдСотрудника, НаименованиеСотрудника)
	
	Сервис = РаботаСВнешнимиСервисамиПовтИсп.ПолучитьСервисЛеон();
	Запрос = Справочники.ЗапросыГрафКуЭл.НайтиПоНаименованию("Сотрудник");
	ТекстЗапроса = Запрос.ТекстЗапроса;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НаименованиеСотрудника", "\"""+НаименованиеСотрудника+"\""");  
	
	Ответ = Ответ(ТекстЗапроса, Сервис);
	
	Для Каждого сот Из Ответ.data.contactByWildcard Цикл
		Если сот.contactNid = ИдСотрудника Тогда
			НовыйСотрудник = Справочники.Сотрудники.СоздатьЭлемент();
			НовыйСотрудник.Наименование = НаименованиеСотрудника;
			НовыйСотрудник.Записать();
		КонецЕсли;
	КонецЦикла;
	
	РегистрыСведений.СоответствияОбъектовСВнешнимиСервисами.ЗаписатьСоответствиеОбъектаВнешнегоСервиса(НовыйСотрудник.Ссылка, Сервис, Формат(ИдСотрудника, "ЧГ="), "Contact");
	
	Возврат НовыйСотрудник.Ссылка;
	
КонецФункции

Функция ПолучитьОбъектВнешнегоСервиса(Сервис, ИдентификаторОбъектаСервиса, ВидОбъектаСервиса)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоответствияОбъектовСВнешнимиСервисами.ОбъектНаджет КАК ОбъектНаджет
		|ИЗ
		|	РегистрСведений.СоответствияОбъектовСВнешнимиСервисами КАК СоответствияОбъектовСВнешнимиСервисами
		|ГДЕ
		|	СоответствияОбъектовСВнешнимиСервисами.Сервис = &Сервис
		|	И СоответствияОбъектовСВнешнимиСервисами.ИдентификаторОбъектаСервиса = &ИдентификаторОбъектаСервиса
		|	И СоответствияОбъектовСВнешнимиСервисами.ВидОбъектаСервиса = &ВидОбъектаСервиса";
	
	Запрос.УстановитьПараметр("ВидОбъектаСервиса", ВидОбъектаСервиса);
	Запрос.УстановитьПараметр("ИдентификаторОбъектаСервиса", Формат(ИдентификаторОбъектаСервиса,"ЧГ="));
	Запрос.УстановитьПараметр("Сервис", Сервис);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.ОбъектНаджет;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьОтветНаЗапросЛеонСофт(ЗапросТекст, ВнешнийСервис, ТестЗапроса = Ложь) Экспорт

// получить все события по ВС
// получить все события по Экипажу Field "aircraftActivities" of type "AircraftActivitiesSection!" must have a sub selection.

	Если ВнешнийСервис = Справочники.ВнешниеСервисы.ПустаяСсылка() Или ВнешнийСервис = Неопределено Тогда
		ВызватьИсключение("Не заполнены настройки по внешнему сервису Leon");
		Возврат Неопределено; 
	КонецЕсли;

	Ответ = Ответ(ЗапросТекст, ВнешнийСервис);

	Если Ответ = Неопределено Тогда 
		Возврат Неопределено;	
	КонецЕсли;

		Если  Ответ.Свойство("errors")  Тогда 
			ВызватьИсключение(Ответ.errors[0].message);
			Возврат Неопределено;
		КонецЕсли;

	Если ТестЗапроса Тогда 
		Возврат "Тест запроса пройден успешно, ошибок не обнаружено!"
	КонецЕсли;

	Возврат Ответ;

КонецФункции

// http://api-schema-doc.s3-website-eu-west-1.amazonaws.com/schema-beta.json

// пример простых запросов на примере указанных в sample-queries
//
// https://bitbucket.org/leondevteam/api-documentation/src/master/sample-queries/
//
//////////////////////////// checklist /////////////////////////////////////////////////

//{
//  checklist {
//    # get available checklist items (and available statuses list on single item) in OPS group
//    getAvailableDefinitions(groupId: OPS) {
//      groupId
//      nid
//      statuses {
//        status
//      }
//    }
//  }
//  flight(flightNid: 18595001) {
//    checklist {
//      # get flight checklist items and status, set on single item
//      allItems {
//        cdNid
//        csId
//      }
//    }
//  }
//}

//mutation {
//  checklist {
//    # set status on flight checklist item (OPS group item)
//    opsItemStatusUpdate(flightNid: 18595001, checklistItemNid: 1, checklistStatusId: "UNT")
//  }
//}


//{
//  flight(flightNid: 18595001) {
//    checklist {
//      # check single checklist item status
//      item(cd_nid: 1) {
//        cdNid,
//        csId
//      }
//    }
//  }
//}


////////////////////////////////// aircraftactivity  ///////////////////////////////////////////

//query {
//  aircraftActivities {
//    activities(registration: "A-BCDE" ) {
//      lift {
//        aircraftTail
//      }
//      activities {
//        activityId
//        startAirport {
//          code {
//            icao
//            iata
//          }
//        }
//        endAirport {
//          code {
//            icao
//            iata
//          }
//        }
//        activityType
//        paxCount
//        startDateTime
//        endDateTime
//        handlers {
//          name
//        }
//        isCanceled
//        
//      }
//    }
//  }
//}

//////////////////////////////////  calculatePrice ///////////////////////////////////////////

//query calculatePrice($rfqPricing: RfqPricingInput!) {
//  sales {
//    getRfqPricing(rfqInput: $rfqPricing) {
//      ... on RfqPricing {
//        registration
//        pricing {
//          aircraftPrices {
//            name
//            quantity
//            totalPrice
//            unitPrice
//          }
//          airportPrices {
//            name
//            airport {
//              code {
//                icao
//              }
//            }
//            quantity
//            unitPrice
//            totalPrice
//          }
//          currency
//          quoteRoundedTo
//          quoteRoundedPrice
//        }
//        __typename
//      }
//      ... on Error {
//        message
//        __typename
//      }
//    }
//  }
//}

//Variables 

//{
//  "rfqPricing": {
//    "itinerary":  [
//      {"date":  "2020-09-26", "adep": "WAW", "ades": "KRK", "paxNumber": 3, "departureOrArrival": "departure", "time": "10:00"},
//      {"date":  "2020-09-28", "adep": "KRK", "ades": "EPWA", "paxNumber": 3, "departureOrArrival": "arrival", "time": "10:00"}
//    ],
//		"aircraftRegistrationList": ["B-ARTI","D-LEON"]
//  }
//}

//////////////////////////////////  confirmedFlights ////////////////////////////////  

//query {
//  flightList(filter: {
//    timeInterval: {
//      start: "2020-03-20"
//      end: "2020-03-31"
//    }
//    flightStatus: CONFIRMED
//  }) {
//    flightNid
//    status
//    startTimeUTC
//    startTimeLocal
//    startTime
//    endTime
//    endTimeUTC
//    endTimeLocal
//    startAirport {
//      code {
//        icao
//        iata
//      }
//      longitudeDec
//      latitudeDec
//      name
//      city
//      country
//    }
//    endAirport {
//      code {
//        icao
//        iata
//      }
//      
//      longitudeDec
//      latitudeDec
//      name
//      city
//      country
//    }
//    acft {
//      registration
//      acftType {
//        iCAO
//        iATA
//      }
//    }
//    trip {
//      client {
//        name
//        contactNid
//        companyName
//        companyNid
//        allWorkEmails
//      }
//    }
//    dist
//    flightRules
//    icaoType
//    isCommercial
//    isCnl
//    passengerList {
//      count
//    }
//  }
//}



//////////////////////////////////  createTripMutation ////////////////////////////////  


//mutation {
//  createTrip(
//    trip: {
//      flights: [
//        {
//          flightNo: "AB"
//          aircraftNid: 6207
//          startTimeUTC: "2020-05-16UTC17:00:00"
//          endTimeUTC: "2020-05-16UTC20:13:53"
//          adepCode: "EGGW"
//          adesCode: "UUWW"
//          isEmptyLeg: true
//        }
//        {
//          flightNo: "BB"
//          aircraftNid: 6207
//          startTimeUTC: "2020-05-16UTC21:00:00"
//          endTimeUTC: "2020-05-16UTC21:59:26"
//          adepCode: "UUWW"
//          adesCode: "ULLI"
//          isEmptyLeg: false
//        }
//        {
//          flightNo: "CC"
//          aircraftNid: 6207
//          startTimeUTC: "2020-05-17UTC01:00:00"
//          endTimeUTC: "2020-05-17UTC03:46:15"
//          adepCode: "ULLI"
//          adesCode: "EGGW"
//          isEmptyLeg: true
//        }
//      ]
//    }
//  ) {
//    tripNid
//    flightList{
//      flightNid
//      
//    }
//  }
//}

////////////////////////////////// crewAndPAXDocuments  //////////////////////////////// 

//query {
//  flightList(filter: {timeInterval: {
//    start: "2020-05-10"
//    end: "2020-05-20"
//  }}) {
//    flightNid
//    flightNo
//    startAirport {
//      code {
//        icao
//        iata
//      }
//      name
//      city
//    }
//    endAirport {
//      code {
//        icao
//        iata
//      }
//      name
//      city
//    }
//    acft {
//      registration
//      acftType {
//        iCAO
//      }
//    }
//    startTimeUTC
//    startTimeLocal
//    endTimeUTC
//    endTimeLocal
//    
//    passengerList {
//      passengerContactList {
//        contact {
//          name
//          surname
//          dateOfBirthString
//        }
//        departurePassport {
//          number
//          countryCode
//          expiresDate
//          dateOfIssueDate
//        }
//        arrivalPassport {
//          number
//          countryCode
//          expiresDate
//          dateOfIssueDate
//        }
//        departureNationalId {
//          number
//          countryCode
//          expires
//          dateOfIssue
//        }
//        arrivalNationalId {
//          number
//          countryCode
//          expires
//          dateOfIssue
//        }
//        
//      }
//      
//    }
//    
//    crewList {
//      position {
//        posType
//        name
//        occupation
//      }
//      contact {
//        name
//        surname
//        phoneWork
//        allWorkEmails
//      }
//    	departurePassport {
//        countryCode
//        expiresDate
//        number
//        dateOfIssueDate
//        
//      }
//      passport {
//        countryCode
//        expiresDate
//        number
//        dateOfIssueDate
//      }
//      
//    }
//  }
//}

////////////////////////////////// emptylegsquery //////////////////////////////// 

//query {
//  aircraftAvailability {
//    emptyLegList(startTime: "2020-05-01") {
//      flightNo
//      startTimeUTC
//      startTimeLocal 
//      endTimeUTC
//      endTimeLocal
//      flightNid
//      acft {
//        registration
//        acftType {
//          iCAO
//          name
//        }
//        paxCapacity
//        paxRange(pax_number: 5)
//        maxRangeWithNoPax
//        maxRangeWithMaxPax
//      }
//      startAirport {
//        code {
//          icao
//          iata
//        }
//        timezone {
//          name
//        }
//        country
//        city
//        timezoneOffset
//      }
//      endAirport {
//        code {
//          icao
//          iata
//        }
//        timezone {
//          name
//        }
//        country
//        city
//        timezoneOffset
//      }
//      dist
//      
//    }
//  }

////////////////////////////////// flightsWithJL //////////////////////////////// 

//query {
//  flightList(filter: {
//    timeInterval: {
//      start: "2020-03-14"
//      end: "2020-03-20"
//    }
//    flightStatus: CONFIRMED
//  }) {
//    flightNid
//    status
//    startTimeUTC
//    startTimeLocal
//    startTime
//    endTime
//    endTimeUTC
//    endTimeLocal
//    startAirport {
//      code {
//        icao
//        iata
//      }
//      longitudeDec
//      latitudeDec
//      name
//      city
//      country
//    }
//    endAirport {
//      code {
//        icao
//        iata
//      }
//      
//      longitudeDec
//      latitudeDec
//      name
//      city
//      country
//    }
//    acft {
//      registration
//      acftType {
//        iCAO
//        iATA
//      }
//    }
//    dist
//    flightRules
//    icaoType
//    isCommercial
//    isCnl
//    passengerList {
//      count
//    }
//    crewList {
//      contact {
//        name
//        surname
//        personCode
//      }
//      position {
//        name
//        posType
//      }
//    }
//    journeyLog {
//    	blockFuel
//      usedFuel
//      remainingFuel
//      taxiFuel
//      refuel
//      fuelUnit
//      weightUnit
//      bag
//      cargo
//      atd
//      ata
//      nightTime
//      paxCount
//      paxMaleCount
//      paxFemaleCount
//      paxChildCount
//      paxInfantCount
//      startTime
//      endTime
//      distance
//      flightLog
//      startAirport {
//        code {
//          icao
//          iata
//        }
//        name
//        country
//      }
//       endAirport {
//        code {
//          icao
//          iata
//        }
//        name
//        country
//    	}
//     landingCount
//     
//    }
//  }
//}

////////////////////////////////// flightswithcrew //////////////////////////////// 


//query {
//  flightList(filter: {timeInterval: {
//    start: "2020-05-10"
//    end: "2020-05-20"
//  }}) {
//    flightNid
//    flightNo
//    startAirport {
//      code {
//        icao
//        iata
//      }
//      name
//      city
//    }
//    endAirport {
//      code {
//        icao
//        iata
//      }
//      name
//      city
//    }
//    acft {
//      registration
//      acftType {
//        iCAO
//      }
//    }
//    startTimeUTC
//    startTimeLocal
//    endTimeUTC
//    endTimeLocal
//    crewList {
//      position {
//        posType
//        name
//        occupation
//      }
//      contact {
//        name
//        surname
//        phoneWork
//        allWorkEmails
//      }
//    }
//  }

////////////////////////////////// flightswithpricing //////////////////////////////// 

//query {
//  flightList(filter: {
//    timeInterval: {
//      start: "2020-10-28"
//      end: "2020-11-01"
//    }
//  }) {
//    status
//    startTime
//    endTime
//    startAirport {
//      code {
//        icao
//        iata
//      }
//      longitudeDec
//      latitudeDec
//      name
//      city
//      country
//    }
//    endAirport {
//      code {
//        icao
//        iata
//      }
//      
//      longitudeDec
//      latitudeDec
//      name
//      city
//      country
//    }
//    acft {
//      registration
//      acftType {
//        iCAO
//        iATA
//      }
//    }
//    dist
//    flightRules
//    icaoType
//    isCommercial
//    isCnl
//    passengerList {
//      count
//    }
//    trip {
//      salesInfo
//      flightOrderNoFull
//      quoteRealization {
//        request {
//          status {
//            name
//          }
//          createdDate
//          nid
//          buyer {
//            client {
//              contact {
//                name
//              }
//            }
//            
//          }
//        }
//        acft {
//          registration
//        },
//        price
//        currency
//        isSubcharter
//        legs {
//          adep {
//            code {
//              icao
//            }
//          }
//          ades {
//            code {
//              icao
//            }
//          }
//        }
//        providerPrice
//        providerCurrency
//        pricing {
//          taxPrices {
//            taxId
//            quantity
//            totalPrice
//            unitPrice
//            name
//          }
//          currency
//          aircraftPrices {
//            name
//            quantity
//            totalPrice
//            unitPrice
//          }
//          airportPrices {
//            name(airport_code: ICAO)
//            totalPrice
//            unitPrice
//            quantity
//            airport {
//              code {
//                icao
//                iata
//              }
//            }
//          }
//        }
//      }
//    }
//  }
//}

//////////////////////////////////  maintenanceList ////////////////////////////////  

//query {
//  opsMaintenance {
//    maintenanceList(
//      timeInterval: { start: "01-05-2021", end: "31-05-2021" }
//      aircraftList: [10547, 7177, 6795]
//    ) {
//      acftReservationNid
//      startTimeUTC
//      endTimeUTC
//      startAirport {
//        code {
//          icao
//          iata
//        }
//      }
//      endAirport {
//        code {
//          icao
//          iata
//        }
//      }
//      notes
//      status
//      acft {
//        registration
//        acftNid
//      }
//    }
//  }
//}

//////////////////////////////////  rfqs ////////////////////////////////  

//query {
//  sales {
//    getQuoteRequestsList(limit: 100) {
//      createdDate
//      status {
//        name
//      }
//      nid
//      buyer {
//        name
//        email
//        phone
//        representative {
//          contactNid
//          name
//          surname
//          emailPrivate
//          allWorkEmails
//        }
//      }
//      realizations {
//        acft {
//          registration
//          acftType {
//            icao
//          }
//          category {
//            categoryName
//          }
//        }
//        price
//        currency
//        legs {
//          adep {
//            code {
//              icao
//              iata
//            }
//            name
//            city
//          }
//          ades {
//              code {
//                icao
//                iata
//              }
//              name
//              city
//          }
//          blockTime
//          flightTime
//          stdLocal
//          staLocal
//          passengerList {
//            count
//          }
//        	distanceNM
//        }
//      }
//    }
//  }
//}

//////////////////////////////////  
